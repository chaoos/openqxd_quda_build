#
# Example input file for openqxd/devel/quda/check{1..4}.c
#

[Run name]
name    48x24x24x24b5.30k0.13625c1.90952id2 # D5d

[Directories]
log_dir     log
cnfg_dir    /home/hpcp/CLS/D5d

[Configurations]
first   10
last    20
step    10

[Lattice parameters]
kappa        0.136250
qhat         0
su3csw       1.909520
u1csw        0
mu           0.0

[Boundary conditions]
type    3
cstar   0

[Field parameters]
gauge   SU(3)

[QUDA]
verbosity QUDA_SUMMARIZE # general verbosity (overwritten by solver verbosities)


# Desciption of the inverter in quda/check3
# For more information, see QudaInvertParam_s struct in quda.h
[Solver]
solver                  QUDA
maxiter                 256
gcrNkrylov              10
tol                     1e-12
reliable_delta          1e-5
inv_type                QUDA_GCR_INVERTER
verbosity               QUDA_VERBOSE # QUDA_SUMMARIZE
cuda_prec_eigensolver   QUDA_DOUBLE_PRECISION # needed for eigensolver, why?
#inv_type_precondition   QUDA_MG_INVERTER # uncomment to use multigrid inverter
solution_type           QUDA_MAT_SOLUTION # overwritten by use_norm_op, use_pc
solve_type              QUDA_DIRECT_SOLVE # overwritten by use_norm_op, use_pc
mass_normalization      QUDA_MASS_NORMALIZATION
cuda_prec_sloppy        QUDA_SINGLE_PRECISION
cuda_prec_precondition  QUDA_HALF_PRECISION

[Solver Multigrid] # only needed if inv_type_precondition = QUDA_MG_INVERTER
n_level                 2 # description of the 2 levels -> see sections "Solver Multigrid Level 0,1" below
generate_all_levels     QUDA_BOOLEAN_TRUE
run_verify              QUDA_BOOLEAN_FALSE
compute_null_vector     QUDA_COMPUTE_NULL_VECTOR_YES

[Solver Multigrid Level 0]
geo_block_size              4 4 4 4
n_vec                       24
spin_block_size             2
precision_null              QUDA_HALF_PRECISION
smoother                    QUDA_CA_GCR_INVERTER
smoother_tol                0.25
nu_pre                      0
nu_post                     8
omega                       0.8
smoother_solve_type         QUDA_DIRECT_PC_SOLVE
cycle_type                  QUDA_MG_CYCLE_RECURSIVE
coarse_solver               QUDA_GCR_INVERTER
coarse_solver_tol           0.25
coarse_solver_maxiter       50
coarse_grid_solution_type   QUDA_MAT_SOLUTION
location                    QUDA_CUDA_FIELD_LOCATION

[Solver Multigrid Level 1]
precision_null              QUDA_HALF_PRECISION
coarse_solver               QUDA_CA_GCR_INVERTER
smoother                    QUDA_CA_GCR_INVERTER
smoother_tol                0.25
spin_block_size             1
coarse_solver_tol           0.25
coarse_solver_maxiter       50
coarse_grid_solution_type   QUDA_MATPC_SOLUTION
smoother_solve_type         QUDA_DIRECT_PC_SOLVE
cycle_type                  QUDA_MG_CYCLE_RECURSIVE
nu_pre                      0
nu_post                     8
omega                       0.8
location                    QUDA_CUDA_FIELD_LOCATION

# Desciption of the eigensolver in quda/check4
# For more information, see QudaInvertParam_s struct in quda.h
[Eigen Solver]
verbosity               QUDA_DEBUG_VERBOSE
eig_type                QUDA_EIG_TR_LANCZOS # QUDA_EIG_IR_ARNOLDI, QUDA_EIG_TR_LANCZOS
use_dagger              QUDA_BOOLEAN_FALSE # Op^dagger
use_norm_op             QUDA_BOOLEAN_TRUE # OP = Op^dagger Op
use_pc                  QUDA_BOOLEAN_FALSE
compute_gamma5          QUDA_BOOLEAN_FALSE # Op = g5 Op
require_convergence     QUDA_BOOLEAN_FALSE
compute_svd             QUDA_BOOLEAN_FALSE
spectrum                QUDA_SPECTRUM_SR_EIG
n_ev                    14
n_conv                  1 # number of eigenvectors/values we want
n_kr                    20
tol                     1e-12
poly_deg                30 # only if use_poly_acc=true
use_poly_acc            QUDA_BOOLEAN_FALSE # ERROR: Polynomial acceleration not supported with non-Hermitian solver (only TRLM and blocked TRLM)
a_max                   0.0 # only if use_poly_acc=true
a_min                   1.0 # only if use_poly_acc=true
batched_rotate          20 # internally the eigensolver resizes kSpace to n_kr + batched_rotate + 1
#use_eigen_qr            QUDA_BOOLEAN_FALSE # for IRAM
#qr_tol                  1e-13 # for IRAM only if use_eigen_qr = false
#block_size              2 # must be factor of n_kr and n_ev, and block_size <= n_conv
save_prec               QUDA_DOUBLE_PRECISION
max_restarts            200
run_verify              QUDA_BOOLEAN_TRUE
